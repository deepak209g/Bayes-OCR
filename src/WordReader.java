import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;

import javax.swing.JComponent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



/**
 *
 * @author 209de
 */
public class WordReader extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = -5464605873618044139L;
	/**
     * Creates new form WordReader
     */
    public WordReader() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Enter = new javax.swing.JTextField();
        TrainButton = new javax.swing.JButton();
        Clean = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        AnswerLabel = new javax.swing.JLabel();
        TestButton = new javax.swing.JButton();
        Clean1 = new javax.swing.JButton();
        canvas1 = new PaddDraw();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Enter Character :");

        TrainButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TrainButton.setText("Train");
        TrainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrainButtonActionPerformed(evt);
            }
        });

        Clean.setText("Clean");
        Clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Enter, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TrainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Clean)
                .addGap(102, 102, 102))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Enter, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(TrainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Clean)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Train", jPanel2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Recognized Word :");

        AnswerLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        TestButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        TestButton.setText("Test");
        TestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestButtonActionPerformed(evt);
            }
        });

        Clean1.setText("Clean");
        Clean1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clean1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(AnswerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(TestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(Clean1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AnswerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Clean1)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Test", jPanel1);

        canvas1.setBackground(new java.awt.Color(255, 255, 255));
        canvas1.setMinimumSize(new java.awt.Dimension(600, 278));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void TrainButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    	Image temp = canvas1.image.getScaledInstance(300, 139, Image.SCALE_AREA_AVERAGING);
    	BufferedImage img = PadDraw.toBufferedImage(temp);
    	double db[][] = new double[temp.getHeight(null)][temp.getWidth(null)];
	    
	    for(int i=0;i<img.getHeight(null);i++){
	    	for(int j=0;j<img.getWidth(null);j++){
	    		Color tempp = new Color(img.getRGB(j, i));
	    		int col = tempp.getBlue();
	    		if(col>0){
	    			col = 0;
	    		}else{
	    			col = 1;
	    		}
	    		db[i][j] = col;
	    	}
	    }
	    ImgMat imgg = new ImgMat(db);
	    imgg.GetRegionofInterest();
	    imgg.ScaleDown(15, 24);
	    double trn[] = imgg.TolinearArray();
	    int classs = (int)Enter.getText().charAt(0) - 97;
	    classify.Train(trn, classs);
    }                                           

    private void TestButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    	int topx=3;
    	Image temp = canvas1.image.getScaledInstance(300, 139, Image.SCALE_AREA_AVERAGING);
    	BufferedImage img = PadDraw.toBufferedImage(temp);
    	double db[][] = new double[temp.getHeight(null)][temp.getWidth(null)];
	    
	    for(int i=0;i<img.getHeight(null);i++){
	    	for(int j=0;j<img.getWidth(null);j++){
	    		Color tempp = new Color(img.getRGB(j, i));
	    		int col = tempp.getBlue();
	    		if(col>0){
	    			col = 0;
	    		}else{
	    			col = 1;
	    		}
	    		db[i][j] = col;
	    	}
	    }
	    ImgMat imgg = new ImgMat(db);
	    int width = imgg.m;
	    imgg.GetRegionofInterest();
	    String ans = "";
	    //imgg.String();
	    //System.out.println();
	    
	    width = imgg.m*2/imgg.n;
	    for(int i=0 ; i<width ;i++){
	    	if((double)imgg.m > (double)imgg.n*2/5.0){
	    		//System.out.println(imgg.m);
		    	ImgMat chare = imgg.nextChar();
		    	//chare.String();
		    	//System.out.println();
		    	chare.GetRegionofInterest();
		    	//chare.String();
		    	chare.ScaleDown(15, 24);
		    	double test[] = chare.TolinearArray();
		    	int cl = classify.Query(test);
//		    	BayesClassifier.Pair[] th= classify.QueryVector(topx);
//		    	int ind=cl;
//		    	double max = 0;
//		    	if(ans.length() == 0){
//		    		for(int y=0;y<topx;y++){
//		    			System.out.print("{" + th[y].first + "," + th[y].second + "}");
//		    			int fromquery = th[y].first;
//		    			double fromdict = mydict.words[fromquery].words.size();
//		    			System.out.println("fromdict: "+fromdict + " fromquery:"+th[y].second);
//		    			double newprob = fromdict*th[y].second;
//		    			System.out.println("  newprob : " + newprob);
//		    			if(newprob>max){
//		    				max = newprob;
//		    				ind = fromquery; 
//		    			}
//		    		}
//		    	}
//		    	if(ans.length()>0){
//		    		for(int y=0;y<topx;y++){
//		    			System.out.print("{" + th[y].first + "," + th[y].second + "}");
//		    			int fromquery = th[y].first;
//		    			double fromdict = mydict.words[(int)ans.charAt(0)-65].other(ans, ""+(char)(fromquery+65));
//		    			System.out.println("fromdict: "+fromdict + " fromquery:"+th[y].second);
//		    			double newprob = fromdict*th[y].second;
//		    			System.out.println("  newprob : " + newprob);
//		    			if(newprob>max){
//		    				max = newprob;
//		    				ind = fromquery; 
//		    			}
//		    		}
//		    		System.out.println();
//		    	}
//		    	
//		    	System.out.println();
		    	char c = (char)(cl+65);
		    	ans+=c;

	    	}
	    }
	    AnswerLabel.setText(ans);
    }                                          

    private void CleanActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    	canvas1.clear();
    }                                     

    private void Clean1ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    	canvas1.clear();
    }                                      

    /**
     * @param args the command line arguments
     * @throws IOException 
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WordReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WordReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WordReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        File input,dict;
        try {
        	input = new File("Bayes.ser");
        	dict = new File("Dict.ser");
        	if(input.createNewFile()){
        		System.out.println("Created fresh network!!");
        		classify = new BayesClassifier(360,26);
        	}else{
        		FileInputStream fileIn = new FileInputStream(input);
        		ObjectInputStream in = new ObjectInputStream(fileIn);
        		classify = (BayesClassifier)in.readObject();
        		in.close();
        		FileInputStream fileInd = new FileInputStream(dict);
        		ObjectInputStream ind = new ObjectInputStream(fileInd);
        		mydict = (Dictionary)ind.readObject();
        		ind.close();
        	}
			
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WordReader temp = new WordReader();
                temp.setVisible(true);
                temp.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                    	FileOutputStream fos = null;
                        ObjectOutputStream out = null;
                        try {
                          fos = new FileOutputStream("Bayes.ser");
                          out = new ObjectOutputStream(fos);
                          out.writeObject(classify);

                          out.close();
                        } catch (Exception ex) {
                          ex.printStackTrace();
                        }
                        
                    }
                });
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel AnswerLabel;
    private javax.swing.JButton Clean;
    private javax.swing.JButton Clean1;
    private javax.swing.JTextField Enter;
    private javax.swing.JButton TestButton;
    private javax.swing.JButton TrainButton;
    private PaddDraw canvas1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    static BayesClassifier classify;
    static Dictionary mydict;
    // End of variables declaration                   
}


class PaddDraw extends JComponent{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	Image image;
	//this is gonna be your image that you draw on
	Graphics2D graphics2D;
	//this is what we'll be using to draw on
	int currentX, currentY, oldX, oldY;
	//these are gonna hold our mouse coordinates
	public static BufferedImage toBufferedImage(Image img)
	{
	    if (img instanceof BufferedImage)
	    {
	        return (BufferedImage) img;
	    }

	    // Create a buffered image with transparency
	    BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_BYTE_BINARY);

	    // Draw the image on to the buffered image
	    Graphics2D bGr = bimage.createGraphics();
	    bGr.drawImage(img, 0, 0, null);
	    bGr.dispose();

	    // Return the buffered image
	    return bimage;
	}
	//Now for the constructors
	public PaddDraw(){
		setDoubleBuffered(false);
		addMouseListener(new MouseAdapter(){
			public void mousePressed(MouseEvent e){
				oldX = e.getX();
				oldY = e.getY();
			}
		});
		//if the mouse is pressed it sets the oldX & oldY
		//coordinates as the mouses x & y coordinates
		addMouseMotionListener(new MouseMotionAdapter(){
			public void mouseDragged(MouseEvent e){
				currentX = e.getX();
				currentY = e.getY();
				if(graphics2D != null){
					graphics2D.setStroke(new BasicStroke(10));
					graphics2D.drawLine(oldX, oldY, currentX, currentY);
				}
				
				repaint();
				oldX = currentX;
				oldY = currentY;
			}

		});
		//while the mouse is dragged it sets currentX & currentY as the mouses x and y
		//then it draws a line at the coordinates
		//it repaints it and sets oldX and oldY as currentX and currentY
	}

	public void paintComponent(Graphics g){
		if(image == null){
			image = createImage(getSize().width, getSize().height);
			graphics2D = (Graphics2D)image.getGraphics();
			graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			clear();

		}
		g.drawImage(image, 0, 0, null);
	}
	//this is the painting bit
	//if it has nothing on it then
	//it creates an image the size of the window
	//sets the value of Graphics as the image
	//sets the rendering
	//runs the clear() method
	//then it draws the image


	public void clear(){
		graphics2D.setPaint(Color.white);
		graphics2D.fillRect(0, 0, getSize().width, getSize().height);
		graphics2D.setPaint(Color.black);
		repaint();
	}
	//this is the clear
	//it sets the colors as white
	//then it fills the window with white
	//thin it sets the color back to black
	public void red(){
		graphics2D.setPaint(Color.red);
		repaint();
	}
	//this is the red paint
	public void black(){
		graphics2D.setPaint(Color.black);
		repaint();
	}
	//black paint
	public void magenta(){
		graphics2D.setPaint(Color.magenta);
		repaint();
	}
	//magenta paint
	public void blue(){
		graphics2D.setPaint(Color.blue);
		repaint();
	}
	//blue paint
	public void green(){
		graphics2D.setPaint(Color.green);
		repaint();
	}
	//green paint

}


